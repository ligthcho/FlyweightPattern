享元模式
https://blog.csdn.net/itachi85/article/details/54707942
视频
https://www.bilibili.com/video/av24176315/?p=13

1.解决非抽象的问题 对象带来系统性能上的问题
2.一切皆对象并不现实 int decimal
3.运用共享技术有效地支持大量细粒度的对象
3.共享技术:经常来解决性能手段--整个享元模式的核心思想
4.字符串占用内存比重比较大
5.FlyweightFactory:享元工厂 
 5.1 GetFlyweightFactory(key) 
     基本思想： 
     这个Key在里面做一个判断，如果这个数据结构里面key如果存在的话，直接返回之前的那个对象，
	 如果这个对象没有被创建的话,那么就把这个对象创建出来加进对象池了,然后再返回。
	 创建出来的对象往往是不能更改的，是只读的，否则是不成立的，别人更改的就失去了共享的意义